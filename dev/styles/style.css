@import '../styles/fonts.css';
.title-block {
  height: auto;
  text-align: center;
}
.title-block h3 {
  font: 48px 'akrobatbold';
  text-transform: uppercase;
  color: #3f66c8;
}
.title-block p {
  font: 30px 'akrobatbold';
  text-transform: uppercase;
  color: #c02c9b !important;
}
a,
a:hover,
li,
img,
input,
textarea {
  transition: all 0.5s ease-in-out;
}
body {
  cursor: default;
  overflow-x: hidden !important;
}
a {
  cursor: pointer;
}
p {
  font: 14px 'tahoma';
  color: #f00 !important;
}
.color-red {
  color: #cd333f;
}
.color-blue {
  color: #195abc;
}
@media only screen and (min-width: 1200px) {
  .footer {
    padding: 52px 0;
    background: #191d27;
    position: relative;
  }
}
@media only screen and (min-width: 320px) and (max-width: 1200px) {
  .footer {
    padding: 52px 0;
    background: #191d27;
    position: relative;
  }
}
@media only screen and (min-width: 1200px) {
  .header {
    position: relative;
    height: 145px;
    background: #191d27;
    font: 12px 'robotobold';
    color: #fff;
  }
}
@media only screen and (min-width: 320px) and (max-width: 1200px) {
  .header {
    position: relative;
    height: auto;
    background: #191d27;
    font: 12px 'robotobold';
  }
}
@media only screen and (min-width: 320px) and (max-width: 1200px) {
  .popup {
    display: none;
    position: relative;
    width: 300px;
    height: 200px;
    border-radius: 6px;
    background: #fff;
  }
  .popup p {
    font: 18px 'akrobatlight';
    text-align: center;
    line-height: 200px;
    color: #000 !important;
    text-decoration: underline;
  }
  .popup-close {
    right: 10px;
    top: 10px;
    position: absolute;
    display: block;
    width: 32px;
    height: 32px;
    background: url('../img/icon-close.png') no-repeat;
  }
}
@media only screen and (min-width: 1200px) {
  .popup {
    display: none;
    position: relative;
    width: 300px;
    height: 200px;
    border-radius: 6px;
    background: #fff;
  }
  .popup p {
    font: 18px 'akrobatlight';
    text-align: center;
    line-height: 200px;
    color: #000 !important;
    text-decoration: underline;
  }
  .popup-close {
    right: 10px;
    top: 10px;
    position: absolute;
    display: block;
    width: 32px;
    height: 32px;
    background: url('../img/icon-close.png') no-repeat;
  }
}
/*
LESS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: @icon-home-width;
}

The large array-like variables contain all information about a single icon
@icon-home: x y offset_x offset_y width height total_width total_height image_path name;

At the bottom of this section, we provide information about the spritesheet itself
@spritesheet: width height image @spritesheet-sprites;
*/
/*
The provided classes are intended to be used with the array-like variables

.icon-home {
  .sprite-width(@icon-home);
}
.icon-email {
  .sprite(@icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
/*
The `.sprites` mixin generates identical output to the CSS template
  but can be overridden inside of LESS

This must be run when you have at least 2 sprites.
  If run with a single sprite, then there will be reference errors.

.sprites(@spritesheet-sprites);
*/
